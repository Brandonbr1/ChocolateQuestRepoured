buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        // Parchment
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // Mixin
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        // Parchment
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
// Mixin
apply plugin: 'org.spongepowered.mixin'
// Parchment
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "$mcVersion-$modVersion"
group = 'team.cqr.cqrepoured'
archivesBaseName = "$modName"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
    includedDependencies
    atDependencies
    buildDependencies

    implementation.extendsFrom(includedDependencies)
    implementation.extendsFrom(atDependencies)
}

repositories {
    // Github Releases
    ivy {
        url 'https://github.com'

        patternLayout {
            artifact '[organisation]/[module]/releases/download/v[revision]/[module]-[revision].[ext]'
        }

        metadataSources { artifact() }
    }

    // GeckoLib
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven' }

    // JEI
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    maven { url 'https://modmaven.k-4u.nl' }

    // CurseForge
    maven { url 'https://www.cursemaven.com' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.31'

    includedDependencies 'meldexun:ASMUtil:1.0.0@jar'
    includedDependencies 'meldexun:ReflectionUtil:1.0.0@jar'

    // GeckoLib
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.65')

    // ReachFix
    atDependencies 'curse.maven:ReachFix-556777:3648997'

    // JEI
    // atDependencies fg.deobf('mezz.jei:jei_1.12.2:4.16.1.302')

    // Mixin
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

minecraft {
    mappings channel: 'parchment', version: '2021.10.17-1.16.5'

    def atDepFileTree = files(configurations.atDependencies.collect { zipTree(it) }).getAsFileTree()
    accessTransformer = files(
        'src/main/resources/META-INF/accesstransformer.cfg',
        atDepFileTree.matching { include 'META-INF/jei_at.cfg' },
        atDepFileTree.matching { include 'META-INF/accesstransformer.cfg' }
    )

    runs {
        client {
            taskName 'runClient CQR 1.16'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                cqrepoured {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName 'runServer CQR 1.16'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                cqrepoured {
                    source sourceSets.main
                }
            }
        }

        data {
            taskName 'runData CQR 1.16'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            args '--mod', 'cqrepoured', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                cqrepoured {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, 'mixins.cqrepoured.refmap.json'
    config 'mixins.cqrepoured.json'
}

// Generate a fixed tsrg file after generating the default tsrg file
createMcpToSrg {
    outputs.upToDateWhen {false}
    doLast {
        fixFG5TsrgForMixinAP(output.get().asFile, file("${buildDir}/fixMcpToSrg/output.tsrg"))
    }
}

// Tell mixin to use the fixed TSRG file
mixin {
    reobfSrgFile = file("${buildDir}/fixMcpToSrg/output.tsrg")
}

// Function that actually fixes the TSRG file
static def fixFG5TsrgForMixinAP(File inFile, File outFile) {
    // Make directory if needed
    outFile.parentFile.mkdirs()

    try (Scanner scanner = new Scanner(inFile); PrintWriter out = new PrintWriter(outFile)) {
        boolean firstLine = true
        while (scanner.hasNextLine()) {
            String next = scanner.nextLine()

            // Skip first 'tsrg left right' header line
            if (firstLine) {
                firstLine = false
                continue
            }

            // Skip 'static' indicators
            if (next.trim() == "static") {
                continue
            }

            // Export line otherwise
            out.println(next)
        }
    }
}

jar {
    from {
        configurations.includedDependencies.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // TODO update this

    classifier = 'universal'

    manifest {
        attributes([
            'FMLCorePlugin': 'team.cqr.cqrepoured.asm.CQRPlugin',
            'FMLCorePluginContainsFMLMod': 'true',
            
            "Specification-Title": "$modName",
            "Specification-Vendor": "CQ-Repoured Team",
            "Specification-Version": "$modVersion", // We are version 1 of ourselves
            "Implementation-Title": "$modName",
            "Implementation-Version": "$modVersion",
            "Implementation-Vendor" :"CQ-Repoured Team",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "cqrepoured.mixins.json"
        ])
    }
}

compileJava {
    classpath = sourceSets.main.compileClasspath + configurations.buildDependencies
}

jar.finalizedBy('reobfJar')
